name: GitHub Pipeline

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Show installed packages # Show packages for debugging
        run: pip freeze

  # New job for general debugging of file structure
  debug_setup:
    runs-on: ubuntu-latest
    needs: build # Depends on build to ensure dependencies are installed if needed for a deeper dive
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Show current working directory
        run: pwd

      - name: List repository root contents
        run: ls -F

      - name: List contents of .github/workflows
        run: |
          if [ -d ".github/workflows" ]; then
            echo "Found .github/workflows directory. Listing its content..."
            ls -F .github/workflows/
          else
            echo ".github/workflows directory not found at the root level."
          fi

      - name: List contents of 'tests' directory
        run: |
          if [ -d "tests" ]; then
            echo "Found 'tests' directory. Listing its content..."
            ls -F tests/
          else
            echo "'tests' directory not found at the root level."
          fi

      - name: List contents of 'tests/api' directory
        run: |
          if [ -d "tests/api" ]; then
            echo "Found 'tests/api' directory. Listing its content..."
            ls -F tests/api/
          else
            echo "'tests/api' directory not found. Check path and casing."
          fi

      - name: List contents of 'tests/ui' directory
        run: |
          if [ -d "tests/ui" ]; then
            echo "Found 'tests/ui' directory. Listing its content..."
            ls -F tests/ui/
          else
            echo "'tests/ui' directory not found. Check path and casing."
          fi

      - name: Find all Python test files recursively
        run: |
          echo "Finding all files named 'test_*.py' or '*_test.py':"
          find . -type f \( -name "test_*.py" -o -name "*_test.py" \)
          echo "Finding all __init__.py files:"
          find . -name "__init__.py"

  unit_and_api_tests:
    runs-on: ubuntu-latest
    needs: build # Now also depends on 'build' to ensure general dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Also ensure pytest-xdist is installed if you're using -n auto
          pip install pytest-xdist

      - name: List files in tests/api before running tests
        run: |
          echo "Contents of tests/api/:"
          ls -F tests/api/
          echo "Finding test files in tests/api/:"
          find tests/api/ -type f \( -name "test_*.py" -o -name "*_test.py" \)

      - name: Run API Tests
        # Added -v for verbose output, --collect-only to see what pytest would collect without running,
        # and --exitfirst for faster failure in debug
        run: pytest tests/api/ -n auto -v --collect-only || pytest tests/api/ -n auto -v

  UI_tests:
    runs-on: ubuntu-latest
    needs: [ unit_and_api_tests, build ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Also ensure pytest-xdist is installed if you're using -n auto
          pip install pytest-xdist

      - name: List files in tests/ui before running tests
        run: |
          echo "Contents of tests/ui/:"
          ls -F tests/ui/
          echo "Finding test files in tests/ui/:"
          find tests/ui/ -type f \( -name "test_*.py" -o -name "*_test.py" \)

      - name: Run UI Tests
        # Added -v for verbose output, --collect-only to see what pytest would collect without running,
        # and --exitfirst for faster failure in debug
        run: pytest tests/ui/ -n auto -v --collect-only || pytest tests/ui/ -n auto -v